#!/usr/bin/env node

// console.info('Node Version', process.version);

const fs = require("fs");
const readline = require("readline");
const path = require("path");

const outputPath = "./data/db.json";

const getAllFiles = (dirPath, fileArray) => {
  const files = fs.readdirSync(dirPath);
  fileArray = fileArray || [];
  files.forEach(function (file) {
    if (fs.statSync(dirPath + "/" + file).isDirectory()) {
      fileArray = getAllFiles(dirPath + "/" + file, fileArray);
    } else {
      if (path.extname(file) === ".json") {
        fileArray.push(path.join(dirPath, "/", file));
      }
    }
  });
  return fileArray;
};

const allFiles = getAllFiles("./data/talks/");

let outputJson = [];
for (let i = 0; i < allFiles.length; i++) {
  const fileName = allFiles[i];

  var originalJson = JSON.parse(fs.readFileSync(fileName, "utf8"));
  const selectedKeys = [
    "aspect_ratio",
    "audio_channels",
    "channel_id",
    "channel_url",
    "description",
    "display_id",
    "duration_string",
    "duration",
    "fps",
    "fulltitle",
    "height",
    "id",
    "playlist_id",
    "playlist_title",
    "playlist",
    "tags",
    "thumbnail",
    "title",
    "upload_date",
    "webpage_url",
    "width",
  ];

  const reduced = Object.keys(originalJson).reduce((obj, key) => {
    if (selectedKeys.includes(key)) obj[key] = originalJson[key];
    return obj;
  }, {});

  // add festival year from file path
  const year = path.parse(path.dirname(fileName)).name;
  reduced.festival_year = year;

  // parse small thumbnail
  const thumb196 = originalJson.thumbnails.filter(thumb => thumb.width === 196)
  if (thumb196.length > 0) {
    reduced.thumbnail_small = thumb196[0].url
  }

  outputJson.push(reduced);
}

const saveOutput = () => {
  try {
    fs.writeFileSync(outputPath, JSON.stringify(outputJson));
  } catch (err) {
    console.error(err);
  }
}

// write output
fs.access(outputPath, fs.constants.F_OK, (err) => {
  if (err) {
    saveOutput();
  } else {
    // File exists, prompt user to confirm overwrite
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.question(`File '${outputPath}' already exists. Do you want to overwrite it? (y/n) `, (answer) => {
      if (answer.toLowerCase() === 'y') {
        console.log(`Overwriting file '${outputPath}'...`);
        saveOutput();
      }
      rl.close();
    });
  }
});
